<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Aoerz | Blog</title>
    <link>https://blog.aoerz.com/</link>
    <description>Recent content on Aoerz | Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 30 Jul 2019 15:08:22 +0800</lastBuildDate>
    
	<atom:link href="https://blog.aoerz.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Find the duplicate number</title>
      <link>https://blog.aoerz.com/post/find-the-duplicate-number/</link>
      <pubDate>Tue, 30 Jul 2019 15:08:22 +0800</pubDate>
      
      <guid>https://blog.aoerz.com/post/find-the-duplicate-number/</guid>
      <description>&lt;p&gt;总结 Leetcode &lt;a href=&#34;https://leetcode.com/problems/find-the-duplicate-number/&#34;&gt;find-the-duplicate-number&lt;/a&gt; 的做法。&lt;/p&gt;

&lt;h2 id=&#34;problem&#34;&gt;Problem&lt;/h2&gt;

&lt;p&gt;Given an array &lt;em&gt;nums&lt;/em&gt; containing &lt;em&gt;n&lt;/em&gt; + 1 integers where each integer is between 1 and &lt;em&gt;n&lt;/em&gt;(inclusive), prove that at least one duplicate number must exist. Assume that there is only one duplicate number, find the duplicate one.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Links</title>
      <link>https://blog.aoerz.com/links/</link>
      <pubDate>Sat, 13 Apr 2019 19:08:01 +0800</pubDate>
      
      <guid>https://blog.aoerz.com/links/</guid>
      <description></description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://blog.aoerz.com/about/</link>
      <pubDate>Sat, 13 Apr 2019 18:58:34 +0800</pubDate>
      
      <guid>https://blog.aoerz.com/about/</guid>
      <description>NULL.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://blog.aoerz.com/post/fibonacci_number/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.aoerz.com/post/fibonacci_number/</guid>
      <description>看了这篇博客知道Fibonacci 有$O(logn)$ 的解法，所以来总结下计算 Nth Fibonacci 的算法。
1.递归 1 2 3 4 5 6 7  int fib(int N) { if (N == 0 || N == 1) { return N; } else { return fib(N - 1) + fib(N - 2); } }   递归算法不推荐，因为时间复杂度为指数级。
可以采用记忆化Memoization 降低复杂度。
2.迭代 1 2 3 4 5 6 7 8 9 10 11 12  int fib(int N) { if (N == 0 || N == 1) { return N; } int f1 = 0, f2 = 1, f = 0; for (int i = 2; i &amp;lt;= N; i++) { f = f1 + f2; f1 = f2; f2 = f; } return f; }   时间复杂度：$O(n)$</description>
    </item>
    
    <item>
      <title></title>
      <link>https://blog.aoerz.com/post/float-issues/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.aoerz.com/post/float-issues/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>